See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (12 warnings)
PMD:          FAILED (11 warnings)
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  7/41 tests passed
Memory:       1/1 tests passed
Timing:       31/41 tests passed

Aggregate score: 45.37%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.0K Jan  2 00:21 BruteCollinearPoints.java
4.4K Jan  2 00:21 FastCollinearPoints.java
4.3K Jan  2 00:21 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Point.java
*-----------------------------------------------------------

% javac11 LineSegment.java
*-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
*-----------------------------------------------------------

% javac11 FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UC_USELESS_OBJECT UC: The object stored in the variable 'pt' is created and modified, but its value never goes outside of the method 'main()' or produces any side effect.  At Point.java:[line 129]
M D UC_USELESS_OBJECT UC: The object stored in the variable 'pt2' is created and modified, but its value never goes outside of the method 'main()' or produces any side effect.  At Point.java:[line 130]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'slopeResult' but that value is never used.  At Point.java:[line 132]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'comparator' but that value is never used.  At Point.java:[line 133]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'compareResult' but that value is never used.  At Point.java:[line 131]
H D UC_USELESS_VOID_METHOD UC: The void method 'main()' appears to serve no purpose.  At Point.java:[line 135]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At BruteCollinearPoints.java:[line 22]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 47]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At FastCollinearPoints.java:[line 23]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 83]
L P SIC_INNER_SHOULD_BE_STATIC_ANON SIC: Should the anonymous inner class 'FastCollinearPoints$1' be refactored into a named static nested class?  At FastCollinearPoints.java:[line 70]
M P UUF_UNUSED_FIELD UuF: The instance (or static) variable 'bcf' is never used. Consider removing it from the class.  In BruteCollinearPoints.java
Warnings generated: 12


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:15: Avoid unused private instance (or static) variables, such as 'bcf'. [UnusedPrivateField]
BruteCollinearPoints.java:16: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BruteCollinearPoints.java:18: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:17: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:19: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:39: The private instance (or static) variable 'origin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:40: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:41: The private instance (or static) variable 'slopeToOrigin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Point.java:131: Avoid unused local variables, such as 'compareResult'. [UnusedLocalVariable]
Point.java:132: Avoid unused local variables, such as 'slopeResult'. [UnusedLocalVariable]
Point.java:133: Avoid unused local variables, such as 'comparator'. [UnusedLocalVariable]
PMD ends with 11 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:15:1: Defining a nested class in this program suggests poor design. [Design]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
     Failed on trial 1 of 100000
     p             = (390, 40)
     q             = (390, 155)
     p.slopeTo(q)  = 0.0
  * positive infinite slope, where p and q have coordinates in [0, 32768)
     Failed on trial 1 of 100000
     p             = (17474, 7370)
     q             = (17474, 29508)
     p.slopeTo(q)  = 0.0
  * negative infinite slope, where p and q have coordinates in [0, 500)
     Failed on trial 1 of 100000
     p, q          = (200, 409)
     p.slopeTo(q)  = Infinity
  * negative infinite slope, where p and q have coordinates in [0, 32768)
     Failed on trial 1 of 100000
     p, q          = (5794, 11138)
     p.slopeTo(q)  = Infinity
  * positive zero     slope, where p and q have coordinates in [0, 500)
     Failed on trial 1 of 100000
     p             = (140, 189)
     q             = (489, 189)
     p.slopeTo(q)  = Infinity
  * positive zero     slope, where p and q have coordinates in [0, 32768)
     Failed on trial 1 of 100000
     p             = (384, 5979)
     q             = (24492, 5979)
     p.slopeTo(q)  = Infinity
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
     Failed on trial 453 of 100000
     p                        = (372, 141)
     q                        = (372, 6)
     student   p.slopeTo(q) = 0.0
     reference p.slopeTo(q) = Infinity
  * slopeTo(), where p and q have coordinates in [0, 32768)
     Failed on trial 5306 of 100000
     p                        = (22170, 21993)
     q                        = (22170, 15573)
     student   p.slopeTo(q) = 0.0
     reference p.slopeTo(q) = Infinity
  * slopeTo(), where p and q have coordinates in [0, 10)
     Failed on trial 7 of 100000
     p                        = (0, 1)
     q                        = (4, 1)
     student   p.slopeTo(q) = Infinity
     reference p.slopeTo(q) = 0.0
  * throw a java.lang.NullPointerException if argument is null
==> FAILED

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
     -  wrong order: y-descending, x-descending
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
     -  wrong order: y-descending, x-descending
  * sign of compareTo(), where p and q have coordinates in [0, 10)
     -  wrong order: y-descending, x-descending
  * throw java.lang.NullPointerException exception if argument is null
==> FAILED

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
     Failed on trial 29 of 100000
     p                         = (46, 241)
     q                         = (391, 440)
     r                         = (276, 241)
     student   p.compare(q, r) = -1
     reference p.compare(q, r) = 1
     reference p.slopeTo(q)    = 0.5768115942028985
     reference p.slopeTo(r)    = 0.0
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
     Failed on trial 6831 of 100000
     p                         = (20741, 28949)
     q                         = (9199, 11739)
     r                         = (20741, 15472)
     student   p.compare(q, r) = 1
     reference p.compare(q, r) = -1
     reference p.slopeTo(q)    = 1.4910760700051984
     reference p.slopeTo(r)    = Infinity
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
     Failed on trial 3 of 100000
     p                         = (6, 6)
     q                         = (7, 6)
     r                         = (3, 4)
     student   p.compare(q, r) = 1
     reference p.compare(q, r) = -1
     reference p.slopeTo(q)    = 0.0
     reference p.slopeTo(r)    = 0.6666666666666666
  * throw java.lang.NullPointerException if either argument is null
==> FAILED


Total: 0/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:155)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:156)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (1000, 17000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:157)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (26000, 27000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:158)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7453, 14118)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:164)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

  * filename = horizontal25.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (19459, 13870)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:165)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (2748, 12676)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:219)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 500
     4
      2748 12676
      3906 12676
      4940 12676
     12276 12676

  *  5 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (17428, 14936)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:220)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 250
     20
     17428 14936
     18684  2825
     20059  2825
      1691 11248
      3635  2825
      4059 17244
      2756 14936
      2602 14936
      9396 11248
      1987 14936
      9821  4841
      7738  4841
      5508  4841
     12647  4841
      3673 11248
      6070 17244
     18987  2825
      7714 17244
     14915 11248
     18303 17244

  * 10 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (20727, 5193)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:221)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 50

  * 15 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (13304, 11101)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:222)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (14407, 19953)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:228)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

  * filename = vertical25.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (11585, 5103)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:229)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7672, 15013)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:235)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 500
     4
      7672 15013
      7672 17290
      7672 18649
      7672  6711

  *  5 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (9963, 4534)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:236)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 250
     20
      9963  4534
     20136 14120
     20136 16318
     19819 18528
      9963  6587
      9963  9806
      3878 10523
      1413 18312
     20136 20880
      3878 16856
     19819 15556
      1413 17065
     19819 13059
      3878 18949
      1413  3749
     20136 15532
     19819  9567
      3878  4629
      1413 10857
      9963 16915

  * 10 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (12021, 2477)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:237)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 50

  * 15 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (14136, 15420)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:238)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (12564, 6350)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test4a(TestBruteCollinearPoints.java:244)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:732)

  * filename = random38.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (19787, 4751)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test4a(TestBruteCollinearPoints.java:245)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:732)

==> FAILED

Test 4b: random points with no line segments
  *  5 random points

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10436, 16426)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:274)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 500
     5
     10436 16426
      2271 14620
       154 11818
     14463  6171
      9968 18087

  * 10 random points

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (27732, 32764)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:275)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 250
     10
     27732 32764
      2751 25558
      7755 25179
     11201 29886
     19087  2440
     17888  7945
     27675 11589
     11209 15525
     32558 29928
      9374 11740

  * 20 random points

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (28133, 24416)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:276)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 100
     20
     28133 24416
     26521  4083
     30782 31945
      7960  9521
      6857 22250
     25958 32095
     13886 21324
     31890 15246
      5961   361
     12025 23583
     18242  6672
      8187  1137
      5053 32504
     18942 19050
     22954 29923
     16536 27069
     25621 12614
     30303 13169
     15644  5174
      9737 32135

  * 50 random points

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (951, 32767)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.no4CollinearPoints(TestBruteCollinearPoints.java:256)
    TestBruteCollinearPoints.test4b(TestBruteCollinearPoints.java:277)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:735)

    - failed on trial 1 of 10

==> FAILED

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (16000, 16000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:284)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:738)

  * filename = input3.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (16000, 16000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:285)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:738)

==> FAILED

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:294)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (1000, 17000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:295)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (26000, 27000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:296)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:304)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:305)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:306)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7914, 8762)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:346)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 500
     4
      7914  8762
      8005 13879
      7927  9493
      7784  1452

  *  5 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (9596, 11224)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:347)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 250
     20
      9596 11224
      3234  6885
      7199  1840
     15026 12307
     10567  6602
      2340  1767
      7904  4600
      3810  4179
     13624 11291
     10019 12880
      4514  8581
      4354  8369
        34  2645
      6954  5481
     19149 18894
     16697 15382
      3109  2386
     12337  9814
     15471 13626
     10119  8751

  * 10 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (11449, 18348)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:348)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 100

  * 15 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (9667, 6051)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:349)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 50

==> FAILED

Test 9: random line segments
  *  1 random line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (6909, 14937)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:379)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 500
     4
      6909 14937
      7089 14946
      7549 14969
      6889 14936

  *  5 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (9293, 5202)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:380)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 250
     20
      9293  5202
     11829  8073
      9293  4570
      8354   853
      7004  8445
      8354  4133
      8718  1509
     13443  7134
      9293    67
     10860  4059
     11301  4584
     12380  8681
      9293  2121
      6133  8068
     11017  7177
      8354  3333
     11568  7785
      5329  7720
      9617  9576
      8354  1893

  * 10 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (14587, 5473)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:381)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 100

  * 15 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (12556, 8340)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:382)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 50

==> FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    BruteCollinearPoints.numberOfSegments(BruteCollinearPoints.java:34)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:438)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:531)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.numberOfSegments()

    - failed on trial 1 of 100

  * equidistant.txt

    java.lang.NullPointerException

    BruteCollinearPoints.segments(BruteCollinearPoints.java:46)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:458)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:532)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          mutate points[] array that was passed to constructor
          collinear.segments()

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:546)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:565)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

  * equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:546)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:566)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:604)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:605)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (1000, 17000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:606)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (26000, 27000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:607)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = horizontal5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7453, 14118)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:608)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = vertical5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (14407, 19953)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:609)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = random23.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (12564, 6350)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:49)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:610)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

==> FAILED

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     13074  3931
     16401 10473
      9855  7379
     20804 30163
     15632 21384
     14216 23098
      6799  3019
     null
      7933 15859
     24599  8521

  * Point[] of length 10, number of null entries = 10
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     null
     null
     null
     null
     null
     null
     null
     null
     null
     null

  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
     11652 25019
     null
      8136 23923
     30378 28158

  * Point[] of length 3, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     3
     14212 31774
     null
     18464  9673

  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
     21471  6075
     null

  * Point[] of length 1, number of null entries = 1
    - constructor fails to throw an exception
     1
     null

==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 1/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 10000) -> (3000, 7000)
    - reference segment 0: (10000, 0) -> (7000, 3000) -> (3000, 7000) -> (0, 10000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 2
    - 6 extra entries in student solution, including:
      '(14000, 15000) -> (6000, 7000)'

    - 2 missing entries in student solution, including:
      '(3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)'


  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 0) -> (9000, 6000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 4
    - 23 extra entries in student solution, including:
      '(10000, 20000) -> (0, 30000)'

    - 3 missing entries in student solution, including:
      '(13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 91: (14000, 24000) -> (25000, 24000)
    - reference segment 1: (2000, 24000) -> (9000, 24000) -> (14000, 24000) -> (25000, 24000)

    - number of entries in student   solution: 188
    - number of entries in reference solution: 4
    - 186 extra entries in student solution, including:
      '(1000, 31000) -> (10000, 31000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 113: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 309
    - number of entries in reference solution: 6
    - 304 extra entries in student solution, including:
      '(24000, 30000) -> (17000, 31000)'

    - 1 missing entry in student solution:
      '(1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)'


  * filename = input299.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 324: (29900, 1600) -> (21900, 9600)
    - reference segment 0: (31000, 500) -> (29900, 1600) -> (23000, 8500) -> (21900, 9600)

    - number of entries in student   solution: 1700
    - number of entries in reference solution: 6
    - 1694 extra entries in student solution, including:
      '(11800, 32650) -> (1000, 32650)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2682, 14118) -> (5067, 14118)
    - reference segment 4: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 22 extra entries in student solution, including:
      '(7821, 14118) -> (5067, 14118)'


  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2566, 13870) -> (10653, 13870)
    - reference segment 13: (2566, 13870) -> (10653, 13870) -> (18005, 13870) -> (19459, 13870)

    - number of entries in student   solution: 147
    - number of entries in reference solution: 25
    - 123 extra entries in student solution, including:
      '(16352, 20913) -> (19666, 20913)'

    - 1 missing entry in student solution:
      '(2566, 13870) -> (10653, 13870) -> (18005, 13870) -> (19459, 13870)'


  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (15233, 7218) -> (17289, 7218)
    - reference segment 17: (6300, 7218) -> (6518, 7218) -> (15233, 7218) -> (17289, 7218)

    - number of entries in student   solution: 297
    - number of entries in reference solution: 50
    - 248 extra entries in student solution, including:
      '(17428, 20754) -> (14800, 20754)'

    - 1 missing entry in student solution:
      '(6300, 7218) -> (6518, 7218) -> (15233, 7218) -> (17289, 7218)'


  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (3822, 19103) -> (1255, 19103)
    - reference segment 69: (1255, 19103) -> (3822, 19103) -> (8086, 19103) -> (20410, 19103)

    - number of entries in student   solution: 448
    - number of entries in reference solution: 75
    - 374 extra entries in student solution, including:
      '(14591, 20976) -> (14178, 20976)'

    - 1 missing entry in student solution:
      '(1255, 19103) -> (3822, 19103) -> (8086, 19103) -> (20410, 19103)'


  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1773, 6140) -> (11759, 6140)
    - reference segment 30: (1238, 6140) -> (1773, 6140) -> (11219, 6140) -> (11759, 6140)

    - number of entries in student   solution: 600
    - number of entries in reference solution: 100
    - 500 extra entries in student solution, including:
      '(19642, 20698) -> (16154, 20698)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (17595, 20031) -> (2994, 20031)
    - reference segment 0: (2330, 20031) -> (2994, 20031) -> (9265, 20031) -> (17595, 20031)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 2 extra entries in student solution, including:
      '(17595, 20031) -> (2994, 20031)'


    - failed on trial 1 of 500
     4
      9265 20031
     17595 20031
      2330 20031
      2994 20031

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6218, 2928) -> (10405, 2928)
    - reference segment 0: (3269, 2928) -> (6218, 2928) -> (10405, 2928) -> (13833, 2928)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 23 extra entries in student solution, including:
      '(19515, 16520) -> (13760, 16520)'

    - 1 missing entry in student solution:
      '(8113, 11972) -> (10422, 11972) -> (10564, 11972) -> (18203, 11972)'


    - failed on trial 1 of 250
     20
      8113 11972
      6218  2928
     10792 11914
     10405  2928
     10394 16520
      9676  4510
     15214 11914
     14277 11914
     10564 11972
      3269  2928
     19515 16520
      8158  4510
     13833  2928
     13779  4510
      4409  4510
     13760 16520
      2426 11914
     10422 11972
      6889 16520
     18203 11972

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13060, 19872) -> (9113, 19872)
    - reference segment 9: (9113, 19872) -> (13060, 19872) -> (13886, 19872) -> (14622, 19872)

    - number of entries in student   solution: 57
    - number of entries in reference solution: 10
    - 48 extra entries in student solution, including:
      '(13886, 19872) -> (14622, 19872)'

    - 1 missing entry in student solution:
      '(2115, 2578) -> (6031, 2578) -> (7762, 2578) -> (15471, 2578)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20452, 16862) -> (9251, 16862)
    - reference segment 11: (2163, 16862) -> (9251, 16862) -> (19347, 16862) -> (20452, 16862)

    - number of entries in student   solution: 87
    - number of entries in reference solution: 15
    - 73 extra entries in student solution, including:
      '(5075, 20859) -> (9093, 20859)'

    - 1 missing entry in student solution:
      '(7449, 19565) -> (12931, 19565) -> (13032, 19565) -> (13390, 19565)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 17831) -> (14407, 10367)
    - reference segment 3: (14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 23 extra entries in student solution, including:
      '(14407, 17831) -> (14407, 17188)'

    - 1 missing entry in student solution:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 11220) -> (11585, 12912)
    - reference segment 12: (11585, 4132) -> (11585, 5103) -> (11585, 11220) -> (11585, 12912)

    - number of entries in student   solution: 147
    - number of entries in reference solution: 25
    - 122 extra entries in student solution, including:
      '(1825, 19478) -> (1825, 19680)'


  * filename = vertical50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10695, 10521) -> (10695, 20927)
    - reference segment 27: (10695, 1287) -> (10695, 10521) -> (10695, 20756) -> (10695, 20927)

    - number of entries in student   solution: 297
    - number of entries in reference solution: 50
    - 247 extra entries in student solution, including:
      '(5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2329, 3548) -> (2329, 5466)
    - reference segment 2: (2329, 3548) -> (2329, 5466) -> (2329, 9995) -> (2329, 11424)

    - number of entries in student   solution: 447
    - number of entries in reference solution: 75
    - 372 extra entries in student solution, including:
      '(6614, 20700) -> (6614, 20468)'


  * filename = vertical100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 4: (6177, 10008) -> (6177, 15031)
    - reference segment 26: (6177, 7115) -> (6177, 10008) -> (6177, 15031) -> (6177, 18079)

    - number of entries in student   solution: 601
    - number of entries in reference solution: 100
    - 502 extra entries in student solution, including:
      '(17852, 20904) -> (17852, 20150)'

    - 1 missing entry in student solution:
      '(6177, 7115) -> (6177, 10008) -> (6177, 15031) -> (6177, 18079)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (20629, 16733) -> (20629, 14012)
    - reference segment 0: (20629, 6645) -> (20629, 14012) -> (20629, 16733) -> (20629, 19066)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 3 extra entries in student solution, including:
      '(20629, 16733) -> (20629, 19066)'

    - 1 missing entry in student solution:
      '(20629, 6645) -> (20629, 14012) -> (20629, 16733) -

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
