See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     FAILED (11 warnings)
PMD:          FAILED (10 warnings)
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  13/41 tests passed
Memory:       1/1 tests passed
Timing:       4/41 tests passed

Aggregate score: 40.98%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.5K Jan  2 06:07 BruteCollinearPoints.java
4.4K Jan  2 06:07 FastCollinearPoints.java
4.2K Jan  2 06:07 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Point.java
*-----------------------------------------------------------

% javac11 LineSegment.java
*-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
*-----------------------------------------------------------

% javac11 FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UC_USELESS_OBJECT UC: The object stored in the variable 'pt' is created and modified, but its value never goes outside of the method 'main()' or produces any side effect.  At Point.java:[line 129]
M D UC_USELESS_OBJECT UC: The object stored in the variable 'pt2' is created and modified, but its value never goes outside of the method 'main()' or produces any side effect.  At Point.java:[line 130]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'slopeResult' but that value is never used.  At Point.java:[line 132]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'comparator' but that value is never used.  At Point.java:[line 133]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'compareResult' but that value is never used.  At Point.java:[line 131]
H D UC_USELESS_VOID_METHOD UC: The void method 'main()' appears to serve no purpose.  At Point.java:[line 135]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At BruteCollinearPoints.java:[line 21]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 46]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At FastCollinearPoints.java:[line 23]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 83]
L P SIC_INNER_SHOULD_BE_STATIC_ANON SIC: Should the anonymous inner class 'FastCollinearPoints$1' be refactored into a named static nested class?  At FastCollinearPoints.java:[line 70]
Warnings generated: 11


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:15: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BruteCollinearPoints.java:17: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:17: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:19: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:39: The private instance (or static) variable 'origin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:40: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:41: The private instance (or static) variable 'slopeToOrigin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Point.java:131: Avoid unused local variables, such as 'compareResult'. [UnusedLocalVariable]
Point.java:132: Avoid unused local variables, such as 'slopeResult'. [UnusedLocalVariable]
Point.java:133: Avoid unused local variables, such as 'comparator'. [UnusedLocalVariable]
PMD ends with 10 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:15:1: Defining a nested class in this program suggests poor design. [Design]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:155)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:156)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (1000, 17000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:157)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (26000, 27000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:158)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7453, 14118)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:164)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

  * filename = horizontal25.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (19459, 13870)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:165)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (15824, 9692)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:219)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 500
     4
     15824  9692
      4835  9692
     14589  9692
      4204  9692

  *  5 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (6102, 12535)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:220)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 250
     20
      6102 12535
      6557  5737
     14667  2772
      4978 18874
      4804  5737
     12632 11743
     15392 18874
     13782 18874
      5809 11743
      4516 18874
     14669  5737
      3452  2772
     14194 12535
      1799 11743
     12999 12535
     13096 12535
     18934  2772
      1868 11743
     10954  5737
      5274  2772

  * 10 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (16202, 1632)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:221)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 50

  * 15 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (20950, 19071)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:222)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (14407, 19953)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:228)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

  * filename = vertical25.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (11585, 5103)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:229)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (12165, 2690)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:235)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 500
     4
     12165  2690
     12165  6040
     12165  3203
     12165  1706

  *  5 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (3014, 1713)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:236)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 250
     20
      3014  1713
     10996 17217
     10996  4926
     18758 12663
      8959 13027
      3014  3517
      7961 11433
      7961 12169
      3014 15070
      8959 13119
     18758 17281
     10996  3874
     18758 20004
      7961 12428
      8959  5545
      7961 19190
     18758 14423
      8959  9809
      3014 19361
     10996  4748

  * 10 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (9777, 11552)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:237)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 50

  * 15 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (9417, 6297)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:238)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:294)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (1000, 17000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:295)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (26000, 27000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:296)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:304)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:305)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:306)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (6350, 9439)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:346)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 500
     4
      6350  9439
     19902  9743
      1268  9325
       421  9306

  *  5 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (1491, 479)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:347)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 250
     20
      1491   479
      6433  9608
     17768 18497
      5494  9064
     13893  9775
     12915  8997
     18737 19304
      5068  5085
     11548  9756
     11937  8219
      3616  7976
      1468  2490
      2677  7432
      3628  4047
      2264  5585
      4230  5022
      6222  8326
     15830 16883
      8961 12869
      3135  1217

  * 10 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (13934, 8522)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:348)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 100

  * 15 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (3848, 3420)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:349)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 50

==> FAILED

Test 9: random line segments
  *  1 random line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (5461, 4484)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:379)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 500
     4
      5461  4484
      4492  3344
      4900  3824
      7144  6464

  *  5 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (4226, 10015)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:380)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 250
     20
      4226 10015
      6614 13132
      7792  9891
      6615  5815
      7898  9999
      6701  5829
      5014  8925
      6074 12787
      2658 10602
      5014  8364
      5884  5696
      1454  9832
      4665  6705
      6786 13242
      5460  7515
      5014  9222
      4506 10435
      5014  8397
      3386  8755
      4895  5535

  * 10 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (1967, 13259)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:381)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 100

  * 15 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7619, 557)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:382)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 50

==> FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    BruteCollinearPoints.numberOfSegments(BruteCollinearPoints.java:33)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:438)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:531)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.numberOfSegments()

    - failed on trial 1 of 100

  * equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:458)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:532)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.segments()

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:546)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:565)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

  * equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:546)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:566)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:604)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 0)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:605)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (1000, 17000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:606)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (26000, 27000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:607)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = horizontal5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7453, 14118)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:608)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = vertical5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (14407, 19953)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:609)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = random23.txt
==> FAILED

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     19409  9301
      3566   723
     null
     12720 19519
     21150 21989
     29000 20282
       873  8118
     13099 31963
     20131 21342
      4290 20163

  * Point[] of length 10, number of null entries = 10
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     null
     null
     null
     null
     null
     null
     null
     null
     null
     null

  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
     16130 25676
     19017 28738
     null
     20462 15134

  * Point[] of length 3, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     3
     18344 29461
     null
     29479  7096

  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
      7360 21816
     null

  * Point[] of length 1, number of null entries = 1
    - constructor fails to throw an exception
     1
     null

==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 4/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 10000) -> (3000, 7000)
    - reference segment 0: (10000, 0) -> (7000, 3000) -> (3000, 7000) -> (0, 10000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 2
    - 6 extra entries in student solution, including:
      '(14000, 15000) -> (6000, 7000)'

    - 2 missing entries in student solution, including:
      '(3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)'


  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 0) -> (9000, 6000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 4
    - 23 extra entries in student solution, including:
      '(10000, 20000) -> (0, 30000)'

    - 3 missing entries in student solution, including:
      '(13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 91: (14000, 24000) -> (25000, 24000)
    - reference segment 1: (2000, 24000) -> (9000, 24000) -> (14000, 24000) -> (25000, 24000)

    - number of entries in student   solution: 188
    - number of entries in reference solution: 4
    - 186 extra entries in student solution, including:
      '(1000, 31000) -> (10000, 31000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 113: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 309
    - number of entries in reference solution: 6
    - 304 extra entries in student solution, including:
      '(24000, 30000) -> (17000, 31000)'

    - 1 missing entry in student solution:
      '(1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)'


  * filename = input299.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 324: (29900, 1600) -> (21900, 9600)
    - reference segment 0: (31000, 500) -> (29900, 1600) -> (23000, 8500) -> (21900, 9600)

    - number of entries in student   solution: 1700
    - number of entries in reference solution: 6
    - 1694 extra entries in student solution, including:
      '(11800, 32650) -> (1000, 32650)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2682, 14118) -> (5067, 14118)
    - reference segment 4: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 22 extra entries in student solution, including:
      '(7821, 14118) -> (5067, 14118)'


  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2566, 13870) -> (10653, 13870)
    - reference segment 13: (2566, 13870) -> (10653, 13870) -> (18005, 13870) -> (19459, 13870)

    - number of entries in student   solution: 147
    - number of entries in reference solution: 25
    - 123 extra entries in student solution, including:
      '(16352, 20913) -> (19666, 20913)'

    - 1 missing entry in student solution:
      '(2566, 13870) -> (10653, 13870) -> (18005, 13870) -> (19459, 13870)'


  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (15233, 7218) -> (17289, 7218)
    - reference segment 17: (6300, 7218) -> (6518, 7218) -> (15233, 7218) -> (17289, 7218)

    - number of entries in student   solution: 297
    - number of entries in reference solution: 50
    - 248 extra entries in student solution, including:
      '(17428, 20754) -> (14800, 20754)'

    - 1 missing entry in student solution:
      '(6300, 7218) -> (6518, 7218) -> (15233, 7218) -> (17289, 7218)'


  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (3822, 19103) -> (1255, 19103)
    - reference segment 69: (1255, 19103) -> (3822, 19103) -> (8086, 19103) -> (20410, 19103)

    - number of entries in student   solution: 448
    - number of entries in reference solution: 75
    - 374 extra entries in student solution, including:
      '(14591, 20976) -> (14178, 20976)'

    - 1 missing entry in student solution:
      '(1255, 19103) -> (3822, 19103) -> (8086, 19103) -> (20410, 19103)'


  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1773, 6140) -> (11759, 6140)
    - reference segment 30: (1238, 6140) -> (1773, 6140) -> (11219, 6140) -> (11759, 6140)

    - number of entries in student   solution: 600
    - number of entries in reference solution: 100
    - 500 extra entries in student solution, including:
      '(19642, 20698) -> (16154, 20698)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9256, 19699) -> (8938, 19699)
    - reference segment 0: (8280, 19699) -> (8938, 19699) -> (9256, 19699) -> (9659, 19699)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 3 extra entries in student solution, including:
      '(9256, 19699) -> (9659, 19699)'

    - 1 missing entry in student solution:
      '(8280, 19699) -> (8938, 19699) -> (9256, 19699) -> (9659, 19699)'


    - failed on trial 1 of 500
     4
      8280 19699
      9256 19699
      8938 19699
      9659 19699

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (9726, 19194) -> (11656, 19194)
    - reference segment 3: (9726, 19194) -> (11656, 19194) -> (13306, 19194) -> (15545, 19194)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 23 extra entries in student solution, including:
      '(17544, 20900) -> (20222, 20900)'

    - 1 missing entry in student solution:
      '(10078, 6117) -> (11656, 6117) -> (13236, 6117) -> (18724, 6117)'


    - failed on trial 1 of 250
     20
     10078  6117
      9726 19194
     19778  9394
     10801  6137
     17544 20900
     15545 19194
      7991  9394
     11656 19194
     13306 19194
     15059  9394
      2867  6137
     11656  6117
     16646 20900
     18724  6117
      9238  9394
     20222 20900
     16111  6137
      8286  6137
      5777 20900
     13236  6117

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (16114, 3467) -> (12552, 3467)
    - reference segment 1: (2294, 3467) -> (6052, 3467) -> (12552, 3467) -> (16114, 3467)

    - number of entries in student   solution: 57
    - number of entries in reference solution: 10
    - 48 extra entries in student solution, including:
      '(18401, 19172) -> (20998, 19172)'

    - 1 missing entry in student solution:
      '(4206, 17890) -> (5333, 17890) -> (12808, 17890) -> (16707, 17890)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2763, 4328) -> (9556, 4328)
    - reference segment 2: (2502, 4328) -> (2763, 4328) -> (9556, 4328) -> (16878, 4328)

    - number of entries in student   solution: 87
    - number of entries in reference solution: 15
    - 73 extra entries in student solution, including:
      '(19224, 15659) -> (18243, 15659)'

    - 1 missing entry in student solution:
      '(10310, 12384) -> (12059, 12384) -> (16808, 12384) -> (16906, 12384)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 17831) -> (14407, 10367)
    - reference segment 3: (14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 23 extra entries in student solution, including:
      '(14407, 17831) -> (14407, 17188)'

    - 1 missing entry in student solution:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 11220) -> (11585, 12912)
    - reference segment 12: (11585, 4132) -> (11585, 5103) -> (11585, 11220) -> (11585, 12912)

    - number of entries in student   solution: 147
    - number of entries in reference solution: 25
    - 122 extra entries in student solution, including:
      '(1825, 19478) -> (1825, 19680)'


  * filename = vertical50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10695, 10521) -> (10695, 20927)
    - reference segment 27: (10695, 1287) -> (10695, 10521) -> (10695, 20756) -> (10695, 20927)

    - number of entries in student   solution: 297
    - number of entries in reference solution: 50
    - 247 extra entries in student solution, including:
      '(5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2329, 3548) -> (2329, 5466)
    - reference segment 2: (2329, 3548) -> (2329, 5466) -> (2329, 9995) -> (2329, 11424)

    - number of entries in student   solution: 447
    - number of entries in reference solution: 75
    - 372 extra entries in student solution, including:
      '(6614, 20700) -> (6614, 20468)'


  * filename = vertical100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 4: (6177, 10008) -> (6177, 15031)
    - reference segment 26: (6177, 7115) -> (6177, 10008) -> (6177, 15031) -> (6177, 18079)

    - number of entries in student   solution: 601
    - number of entries in reference solution: 100
    - 502 extra entries in student solution, including:
      '(17852, 20904) -> (17852, 20150)'

    - 1 missing entry in student solution:
      '(6177, 7115) -> (6177, 10008) -> (6177, 15031) -> (6177, 18079)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7334, 7832) -> (7334, 6718)
    - reference segment 0: (7334, 6718) -> (7334, 7579) -> (7334, 7832) -> (7334, 16361)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 3 extra entries in student solution, including:
      '(7334, 7832) -> (7334, 7579)'

    - 1 missing entry in student solution:
      '(7334, 6718) -> (7334, 7579) -> (7334, 7832) -> (7334, 16361)'


    - failed on trial 1 of 500
     4
      7334 16361
      7334  7832
      7334  6718
      7334  7579

  *  5 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (12215, 14572) -> (12215, 10507)
    - reference segment 3: (12215, 7955) -> (12215, 10507) -> (12215, 14572) -> (12215, 17443)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 22 extra entries in student solution, including:
      '(11021, 16527) -> (11021, 16727)'


    - failed on trial 1 of 250
     20
     17314 14425
     12215 14572
     11139 15240
     17314 19205
     12215 10507
      9276  3660
     11139  8423
     12215 17443
     11021 16527
      9276 13053
     11021 15970
      9276  5631
      9276  7561
     17314 12500
     11021 16727
     12215  7955
     11139  7470
     17314  4279
     11021  2433
     11139 13577

  * 10 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (11556, 1128) -> (11556, 19025)
    - reference segment 4: (11556, 1128) -> (11556, 13287) -> (11556, 19025) -> (11556, 20369)

    - number of entries in student   solution: 57
    - number of entries in reference solution: 10
    - 47 extra entries in student solution, including:
      '(11556, 20369) -> (11556, 19025)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9830, 3191) -> (9830, 16436)
    - reference segment 6: (9830, 3191) -> (9830, 13370) -> (9830, 16436) -> (9830, 19957)

    - number of entries in student   solution: 87
    - number of entries in reference solution: 15
    - 72 extra entries in student solution, including:
      '(2249, 19189) -> (2249, 19241)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 9000) -> (5000, 5000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 33
    - number of entries in reference solution: 1
    - 32 extra entries in student solution, including:
      '(8000, 8000) -> (7000, 7000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 21000) -> (23000, 16000)
    - reference segment 0: (28000, 13500) -> (23000, 16000) -> (13000, 21000) -> (3000, 26000)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 2
    - 9 extra entries in student solution, including:
      '(3500, 28000) -> (3000, 26000)'

    - 1 missing entry in student solution:
      '(28000, 13500) -> (23000, 16000) -> (13000, 21000) -> (3000, 26000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 9: (5120, 20992) -> (6144, 20992)
    - reference segment 0: (4096, 20992) -> (5120, 20992) -> (6144, 20992) -> (7168, 20992) -> (8128, 20992)

    - number of entries in student   solution: 78
    - number of entries in reference solution: 5
    - 73 extra entries in student solution, including:
      '(8192, 29184) -> (7168, 29184)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 123: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 352
    - number of entries in reference solution: 7
    - 346 extra entries in student solution, including:
      '(24000, 30000) -> (17000, 31000)'

    - 1 missing entry in student solution:
      '(1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 124: (31000, 1000) -> (24000, 22000)
    - reference segment 0: (31000, 1000) -> (26000, 16000) -> (24000, 22000) -> (22000, 28000)

    - number of entries in student   solution: 1494
    - number of entries in reference solution: 31
    - 1464 extra entries in student solution, including:
      '(27000, 31000) -> (29000, 31000)'

    - 1 missing entry in student solution:
      '(0, 23000) -> (8000, 23000) -> (21000, 23000) -> (26000, 23000) -> (30000, 23000)'


  * filename = input300.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 332: (29900, 1600) -> (21900, 9600)
    - reference segment 0: (31000, 500) -> (29900, 1600) -> (23000, 8500) -> (21900, 9600)

    - number of entries in student   solution: 1730
    - number of entries in reference solution: 6
    - 1724 extra entries in student solution, including:
      '(11800, 32650) -> (1000, 32650)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (30000, 0) -> (20000, 25000)
    - reference segment 0: (30000, 0) -> (27000, 7500) -> (26000, 10000) -> (20000, 25000) -> (19000, 27500) -> (18000, 30000)

    - number of entries in student   solution: 79
    - number of entries in reference solution: 5
    - 75 extra entries in student solution, including:
      '(18000, 30000) -> (0, 30000)'

    - 1 missing entry in student solution:
      '(0, 0) -> (2300, 4100) -> (4600, 8200) -> (11500, 20500)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 20: (22440, 16455) -> (22335, 19149)
    - reference segment 0: (22440, 16455) -> (22405, 17353) -> (22370, 18251) -> (22335, 19149) -> (22300, 20047)

    - number of entries in student   solution: 6753
    - number of entries in reference solution: 288
    - 6589 extra entries in student solution, including:
      '(14764, 30467) -> (14236, 30449)'

    - 124 missing entries in student solution, including:
      '(12652, 30395) -> (13180, 30413) -> (13708, 30431) -> (14236, 30449) -> (14764, 30467)'


  * filename = rs1423.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3995, 9017) -> (3994, 9820)
    - reference segment 0: (3996, 8214) -> (3995, 9017) -> (3994, 9820) -> (3993, 10623)

    - number of entries in student   solution: 4864
    - number of entries in reference solution: 443
    - 4710 extra entries in student solution, including:
      '(13053, 28029) -> (13443, 28086)'

    - 289 missing entries in student solution, including:
      '(14169, 27672) -> (13927, 27810) -> (13685, 27948) -> (13443, 28086)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 0) -> (9000, 6000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - numbe

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
