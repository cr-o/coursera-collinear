Spotbugs:     FAILED (11 warnings)
PMD:          FAILED (10 warnings)
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  13/41 tests passed
Memory:       1/1 tests passed
Timing:       4/41 tests passed

Aggregate score: 40.98%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.0K Jan  2 04:47 BruteCollinearPoints.java
4.4K Jan  2 04:47 FastCollinearPoints.java
4.2K Jan  2 04:47 Point.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac11 Point.java
*-----------------------------------------------------------

% javac11 LineSegment.java
*-----------------------------------------------------------

% javac11 BruteCollinearPoints.java
*-----------------------------------------------------------

% javac11 FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M D UC_USELESS_OBJECT UC: The object stored in the variable 'pt' is created and modified, but its value never goes outside of the method 'main()' or produces any side effect.  At Point.java:[line 129]
M D UC_USELESS_OBJECT UC: The object stored in the variable 'pt2' is created and modified, but its value never goes outside of the method 'main()' or produces any side effect.  At Point.java:[line 130]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'slopeResult' but that value is never used.  At Point.java:[line 132]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'comparator' but that value is never used.  At Point.java:[line 133]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'compareResult' but that value is never used.  At Point.java:[line 131]
H D UC_USELESS_VOID_METHOD UC: The void method 'main()' appears to serve no purpose.  At Point.java:[line 135]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'BruteCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At BruteCollinearPoints.java:[line 21]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At BruteCollinearPoints.java:[line 46]
M V EI_EXPOSE_REP2 EI2: Stores a reference to an externally mutable object in the instance variable 'points', exposing the internal representation of the class 'FastCollinearPoints'. Instead, create a defensive copy of the object referenced by the parameter variable 'points' and store that copy in the instance variable 'points'.  At FastCollinearPoints.java:[line 23]
L D FE_FLOATING_POINT_EQUALITY FE: Tests for exact floating-point equality. Because floating-point calculations may involve rounding, the calculated values may be imprecise.  At FastCollinearPoints.java:[line 83]
L P SIC_INNER_SHOULD_BE_STATIC_ANON SIC: Should the anonymous inner class 'FastCollinearPoints$1' be refactored into a named static nested class?  At FastCollinearPoints.java:[line 70]
Warnings generated: 11


================================================================


% pmd .
*-----------------------------------------------------------
BruteCollinearPoints.java:15: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BruteCollinearPoints.java:17: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:17: The private instance (or static) variable 'points' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:19: The user-supplied array 'points' is stored directly. [ArrayIsStoredDirectly]
FastCollinearPoints.java:39: The private instance (or static) variable 'origin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:40: The private instance (or static) variable 'point' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
FastCollinearPoints.java:41: The private instance (or static) variable 'slopeToOrigin' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Point.java:131: Avoid unused local variables, such as 'compareResult'. [UnusedLocalVariable]
Point.java:132: Avoid unused local variables, such as 'slopeResult'. [UnusedLocalVariable]
Point.java:133: Avoid unused local variables, such as 'comparator'. [UnusedLocalVariable]
PMD ends with 10 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------
[WARN] FastCollinearPoints.java:15:1: Defining a nested class in this program suggests poor design. [Design]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7000, 3000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:155)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (0, 10000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:156)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 28000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:157)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (22000, 9000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test1(TestBruteCollinearPoints.java:158)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:717)

==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (5067, 14118)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:164)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

  * filename = horizontal25.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (18005, 13870)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test2a(TestBruteCollinearPoints.java:165)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:720)

==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (5434, 2346)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:219)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 500
     4
     20424  2346
     14892  2346
     15071  2346
      5434  2346

  *  5 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (11831, 16716)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:220)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 250
     20
     15475 13648
      3899 13648
      6977 13648
     11831 16716
      1557 12515
     14724 12515
     16246 20954
     18862 20954
     16943 12515
      3411 11244
     10650 11244
      2760 12515
     17277 13648
      9230 16716
     16507 16716
     19015 20954
     19998 20954
      2035 11244
     12244 11244
     13468 16716

  * 10 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (5401, 11494)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:221)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 50

  * 15 random horizontal line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (20943, 10785)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.horizontalSegments(TestBruteCollinearPoints.java:177)
    TestBruteCollinearPoints.test2b(TestBruteCollinearPoints.java:222)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:723)

    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (14407, 17188)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:228)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

  * filename = vertical25.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (11585, 4132)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test3a(TestBruteCollinearPoints.java:229)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:726)

==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (19423, 17600)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:235)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 500
     4
     19423 10340
     19423  6021
     19423  8557
     19423 17600

  *  5 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (17770, 15569)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:236)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 250
     20
     16667  7945
     16943 16945
     11506  5934
     17770 15569
     16943 12996
     11506 13509
     16667 16601
     11506 12065
     17770 20413
     16943 19206
     17770 20747
     11506 20042
     17770 11106
     19217 19445
     19217  5564
     16943  2135
     16667  1385
     16667  7828
     19217  3355
     19217 16864

  * 10 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (9537, 6515)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:237)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 50

  * 15 random vertical line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (13849, 9542)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.verticalSegments(TestBruteCollinearPoints.java:201)
    TestBruteCollinearPoints.test3b(TestBruteCollinearPoints.java:238)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:729)

    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (0, 10000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:294)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 28000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:295)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (22000, 9000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test6(TestBruteCollinearPoints.java:296)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:741)

==> FAILED

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:304)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:305)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point:

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:150)
    TestBruteCollinearPoints.test7(TestBruteCollinearPoints.java:306)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:744)


It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (8332, 3539)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:346)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 500
     4
      9218  5047
      7446  2031
      9661  5801
      8332  3539

  *  5 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (8487, 10834)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:347)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 250
     20
      5627  2122
      1261  9452
      8747 11626
      8487 10834
      7590  9519
     12175 11881
     13726 17145
      5861  7168
     12296 15331
       591  9396
     11981 10348
      2601  9564
      6257 10297
      7769 10112
     13789 12313
      5442  2403
     10151 12610
      1684  9073
      6695  6554
      9787 14794

  * 10 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (5278, 435)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:348)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 100

  * 15 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (17346, 16759)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.noVerticalOrHorizontalSegments(TestBruteCollinearPoints.java:328)
    TestBruteCollinearPoints.test8(TestBruteCollinearPoints.java:349)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:747)

    - failed on trial 1 of 50

==> FAILED

Test 9: random line segments
  *  1 random line segment

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7043, 12358)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:379)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 500
     4
      7111 12358
      6771 12358
      6091 12358
      7043 12358

  *  5 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (3155, 5498)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:380)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 250
     20
       476  2338
      9742  7850
      9786  7864
      3155  5498
      9326 13012
      9126 12948
      7083 12154
      7426 12404
     11194  8312
      5208  4626
      4311  7996
      3388  3746
      6435 11182
      8083 12505
      8979 13779
      5395  8683
      2114  3130
      9302  7710
      4887  8860
      7026 12276

  * 10 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (2882, 6205)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:381)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 100

  * 15 random line segments

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (8934, 14252)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:109)
    TestBruteCollinearPoints.arbitrarySegments(TestBruteCollinearPoints.java:361)
    TestBruteCollinearPoints.test9(TestBruteCollinearPoints.java:382)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:750)

    - failed on trial 1 of 50

==> FAILED

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt

    java.lang.NullPointerException

    BruteCollinearPoints.segments(BruteCollinearPoints.java:45)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:458)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:531)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          mutate points[] array that was passed to constructor
          mutate points[] array that was passed to constructor
          collinear.segments()

    - failed on trial 1 of 100

  * equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (0, 10000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    BruteCollinearPoints.numberOfSegments(BruteCollinearPoints.java:33)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:438)
    TestBruteCollinearPoints.testImmutable(TestBruteCollinearPoints.java:516)
    TestBruteCollinearPoints.test10(TestBruteCollinearPoints.java:532)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:753)

    - sequence of operations was:
          BruteCollinearPoints collinear = new BruteCollinearPoints(points);
          collinear.numberOfSegments()

    - failed on trial 1 of 100

==> FAILED

Test 11: check that data type does not mutate the constructor argument
  * input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7000, 3000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:546)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:565)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

  * equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (0, 10000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testMutateConstructorArgument(TestBruteCollinearPoints.java:546)
    TestBruteCollinearPoints.test11(TestBruteCollinearPoints.java:566)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:756)

==> FAILED

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (7000, 3000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:604)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = equidistant.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (0, 10000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:605)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input40.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (10000, 28000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:606)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = input48.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (22000, 9000)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:607)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = horizontal5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (5067, 14118)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:608)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = vertical5.txt

    java.lang.IllegalArgumentException: both arguments to LineSegment constructor are the same point: (14407, 17188)

    LineSegment.<init>(LineSegment.java:20)
    BruteCollinearPoints.segments(BruteCollinearPoints.java:48)
    TestBruteCollinearPoints.testNumberOfSegments(TestBruteCollinearPoints.java:574)
    TestBruteCollinearPoints.fileNumberOfSegments(TestBruteCollinearPoints.java:599)
    TestBruteCollinearPoints.test12(TestBruteCollinearPoints.java:609)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:759)

  * filename = random23.txt
==> FAILED

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     0

  * Point[] of length 10, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     13350  3704
     null
     25442 23787
       132 17300
     16064 31385
     18137 21475
      6867 11965
     32466 13649
     20015 28600
      8871 10239

  * Point[] of length 10, number of null entries = 10
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     10
     null
     null
     null
     null
     null
     null
     null
     null
     null
     null

  * Point[] of length 4, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     4
      2374 12311
     18999 10375
      6623 16968
     null

  * Point[] of length 3, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     3
     null
     14092 17634
      5865 22398

  * Point[] of length 2, number of null entries = 1
    - constructor throws wrong exception
    - constructor throws a java.lang.NullPointerException
    - constructor should throw a java.lang.IllegalArgumentException
     2
     30772  8308
     null

  * Point[] of length 1, number of null entries = 1
    - constructor fails to throw an exception
     1
     null

==> FAILED

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 4/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (0, 10000) -> (3000, 7000)
    - reference segment 0: (10000, 0) -> (7000, 3000) -> (3000, 7000) -> (0, 10000)

    - number of entries in student   solution: 6
    - number of entries in reference solution: 2
    - 6 extra entries in student solution, including:
      '(14000, 15000) -> (6000, 7000)'

    - 2 missing entries in student solution, including:
      '(3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)'


  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 0) -> (9000, 6000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 4
    - 23 extra entries in student solution, including:
      '(10000, 20000) -> (0, 30000)'

    - 3 missing entries in student solution, including:
      '(13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)'


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 91: (14000, 24000) -> (25000, 24000)
    - reference segment 1: (2000, 24000) -> (9000, 24000) -> (14000, 24000) -> (25000, 24000)

    - number of entries in student   solution: 188
    - number of entries in reference solution: 4
    - 186 extra entries in student solution, including:
      '(1000, 31000) -> (10000, 31000)'

    - 2 missing entries in student solution, including:
      '(1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)'


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 113: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 309
    - number of entries in reference solution: 6
    - 304 extra entries in student solution, including:
      '(24000, 30000) -> (17000, 31000)'

    - 1 missing entry in student solution:
      '(1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)'


  * filename = input299.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 324: (29900, 1600) -> (21900, 9600)
    - reference segment 0: (31000, 500) -> (29900, 1600) -> (23000, 8500) -> (21900, 9600)

    - number of entries in student   solution: 1700
    - number of entries in reference solution: 6
    - 1694 extra entries in student solution, including:
      '(11800, 32650) -> (1000, 32650)'


==> FAILED

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2682, 14118) -> (5067, 14118)
    - reference segment 4: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 22 extra entries in student solution, including:
      '(7821, 14118) -> (5067, 14118)'


  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (2566, 13870) -> (10653, 13870)
    - reference segment 13: (2566, 13870) -> (10653, 13870) -> (18005, 13870) -> (19459, 13870)

    - number of entries in student   solution: 147
    - number of entries in reference solution: 25
    - 123 extra entries in student solution, including:
      '(16352, 20913) -> (19666, 20913)'

    - 1 missing entry in student solution:
      '(2566, 13870) -> (10653, 13870) -> (18005, 13870) -> (19459, 13870)'


  * filename = horizontal50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (15233, 7218) -> (17289, 7218)
    - reference segment 17: (6300, 7218) -> (6518, 7218) -> (15233, 7218) -> (17289, 7218)

    - number of entries in student   solution: 297
    - number of entries in reference solution: 50
    - 248 extra entries in student solution, including:
      '(17428, 20754) -> (14800, 20754)'

    - 1 missing entry in student solution:
      '(6300, 7218) -> (6518, 7218) -> (15233, 7218) -> (17289, 7218)'


  * filename = horizontal75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (3822, 19103) -> (1255, 19103)
    - reference segment 69: (1255, 19103) -> (3822, 19103) -> (8086, 19103) -> (20410, 19103)

    - number of entries in student   solution: 448
    - number of entries in reference solution: 75
    - 374 extra entries in student solution, including:
      '(14591, 20976) -> (14178, 20976)'

    - 1 missing entry in student solution:
      '(1255, 19103) -> (3822, 19103) -> (8086, 19103) -> (20410, 19103)'


  * filename = horizontal100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 2: (1773, 6140) -> (11759, 6140)
    - reference segment 30: (1238, 6140) -> (1773, 6140) -> (11219, 6140) -> (11759, 6140)

    - number of entries in student   solution: 600
    - number of entries in reference solution: 100
    - 500 extra entries in student solution, including:
      '(19642, 20698) -> (16154, 20698)'


==> FAILED

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1027, 19056) -> (10687, 19056)
    - reference segment 0: (1027, 19056) -> (6951, 19056) -> (10687, 19056) -> (10693, 19056)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 2 extra entries in student solution, including:
      '(10687, 19056) -> (10693, 19056)'


    - failed on trial 1 of 500
     4
      6951 19056
      1027 19056
     10687 19056
     10693 19056

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (16487, 1204) -> (9671, 1204)
    - reference segment 0: (1894, 1204) -> (5231, 1204) -> (9671, 1204) -> (16487, 1204)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 22 extra entries in student solution, including:
      '(11528, 17128) -> (3620, 17128)'


    - failed on trial 1 of 250
     20
      8633 17128
     16487  1204
      9671  1204
     10231  2566
     15457 13951
     14580  2413
     11671  2566
      3941  2413
      2952 17128
     16028 13951
     15266  2566
     11653  2566
      8737 13951
     11528 17128
      3620 17128
      5231  1204
     13768  2413
      1125 13951
     10373  2413
      1894  1204

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5257, 3695) -> (5171, 3695)
    - reference segment 2: (5171, 3695) -> (5257, 3695) -> (8053, 3695) -> (11732, 3695)

    - number of entries in student   solution: 57
    - number of entries in reference solution: 10
    - 47 extra entries in student solution, including:
      '(13227, 17404) -> (19259, 17404)'


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11633, 20725) -> (16009, 20725)
    - reference segment 14: (11633, 20725) -> (12406, 20725) -> (16009, 20725) -> (17233, 20725)

    - number of entries in student   solution: 87
    - number of entries in reference solution: 15
    - 72 extra entries in student solution, including:
      '(16009, 20725) -> (17233, 20725)'


    - failed on trial 1 of 5

==> FAILED

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 17831) -> (14407, 10367)
    - reference segment 3: (14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 23 extra entries in student solution, including:
      '(14407, 17831) -> (14407, 17188)'

    - 1 missing entry in student solution:
      '(14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)'


  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 11220) -> (11585, 12912)
    - reference segment 12: (11585, 4132) -> (11585, 5103) -> (11585, 11220) -> (11585, 12912)

    - number of entries in student   solution: 147
    - number of entries in reference solution: 25
    - 122 extra entries in student solution, including:
      '(1825, 19478) -> (1825, 19680)'


  * filename = vertical50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10695, 10521) -> (10695, 20927)
    - reference segment 27: (10695, 1287) -> (10695, 10521) -> (10695, 20756) -> (10695, 20927)

    - number of entries in student   solution: 297
    - number of entries in reference solution: 50
    - 247 extra entries in student solution, including:
      '(5991, 20340) -> (5991, 20424)'


  * filename = vertical75.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (2329, 3548) -> (2329, 5466)
    - reference segment 2: (2329, 3548) -> (2329, 5466) -> (2329, 9995) -> (2329, 11424)

    - number of entries in student   solution: 447
    - number of entries in reference solution: 75
    - 372 extra entries in student solution, including:
      '(6614, 20700) -> (6614, 20468)'


  * filename = vertical100.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 4: (6177, 10008) -> (6177, 15031)
    - reference segment 26: (6177, 7115) -> (6177, 10008) -> (6177, 15031) -> (6177, 18079)

    - number of entries in student   solution: 601
    - number of entries in reference solution: 100
    - 502 extra entries in student solution, including:
      '(17852, 20904) -> (17852, 20150)'

    - 1 missing entry in student solution:
      '(6177, 7115) -> (6177, 10008) -> (6177, 15031) -> (6177, 18079)'


==> FAILED

Test 3b: random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6160, 1658) -> (6160, 6381)
    - reference segment 0: (6160, 1658) -> (6160, 6381) -> (6160, 9948) -> (6160, 17015)

    - number of entries in student   solution: 3
    - number of entries in reference solution: 1
    - 3 extra entries in student solution, including:
      '(6160, 6381) -> (6160, 9948)'

    - 1 missing entry in student solution:
      '(6160, 1658) -> (6160, 6381) -> (6160, 9948) -> (6160, 17015)'


    - failed on trial 1 of 500
     4
      6160 17015
      6160  1658
      6160  6381
      6160  9948

  *  5 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (17569, 5688) -> (17569, 18359)
    - reference segment 3: (17569, 5167) -> (17569, 5688) -> (17569, 18359) -> (17569, 19621)

    - number of entries in student   solution: 27
    - number of entries in reference solution: 5
    - 23 extra entries in student solution, including:
      '(17569, 18359) -> (17569, 19621)'

    - 1 missing entry in student solution:
      '(15664, 8177) -> (15664, 10472) -> (15664, 13826) -> (15664, 19344)'


    - failed on trial 1 of 250
     20
     15664 19344
     17569  5688
      2869 13677
      2869 15780
     17569 18359
     20621 11382
     15664 10472
     17569 19621
     20621 19661
     20621  7635
      4843 18619
      2869  1753
      4843 13868
     20621  8104
      4843  9024
     15664 13826
     15664  8177
      2869  4794
     17569  5167
      4843  9936

  * 10 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (8376, 7601) -> (8376, 4284)
    - reference segment 3: (8376, 4284) -> (8376, 7601) -> (8376, 7704) -> (8376, 16266)

    - number of entries in student   solution: 57
    - number of entries in reference solution: 10
    - 48 extra entries in student solution, including:
      '(13085, 18771) -> (13085, 19078)'

    - 1 missing entry in student solution:
      '(6562, 4127) -> (6562, 6727) -> (6562, 7316) -> (6562, 20937)'


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (6119, 20763) -> (6119, 4469)
    - reference segment 3: (6119, 1218) -> (6119, 4469) -> (6119, 18050) -> (6119, 20763)

    - number of entries in student   solution: 87
    - number of entries in reference solution: 15
    - 72 extra entries in student solution, including:
      '(5082, 19539) -> (5082, 20856)'


    - failed on trial 1 of 5

==> FAILED

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9000, 9000) -> (5000, 5000)
    - reference segment 0: (1000, 1000) -> (2000, 2000) -> (3000, 3000) -> (4000, 4000) -> (5000, 5000) -> (6000, 6000) -> (7000, 7000) -> (8000, 8000) -> (9000, 9000)

    - number of entries in student   solution: 33
    - number of entries in reference solution: 1
    - 32 extra entries in student solution, including:
      '(8000, 8000) -> (7000, 7000)'


  * filename = input10.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 21000) -> (23000, 16000)
    - reference segment 0: (28000, 13500) -> (23000, 16000) -> (13000, 21000) -> (3000, 26000)

    - number of entries in student   solution: 10
    - number of entries in reference solution: 2
    - 9 extra entries in student solution, including:
      '(3500, 28000) -> (3000, 26000)'

    - 1 missing entry in student solution:
      '(28000, 13500) -> (23000, 16000) -> (13000, 21000) -> (3000, 26000)'


  * filename = input20.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 9: (5120, 20992) -> (6144, 20992)
    - reference segment 0: (4096, 20992) -> (5120, 20992) -> (6144, 20992) -> (7168, 20992) -> (8128, 20992)

    - number of entries in student   solution: 78
    - number of entries in reference solution: 5
    - 73 extra entries in student solution, including:
      '(8192, 29184) -> (7168, 29184)'


  * filename = input50.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 123: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - number of entries in student   solution: 352
    - number of entries in reference solution: 7
    - 346 extra entries in student solution, including:
      '(24000, 30000) -> (17000, 31000)'

    - 1 missing entry in student solution:
      '(1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)'


  * filename = input80.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 124: (31000, 1000) -> (24000, 22000)
    - reference segment 0: (31000, 1000) -> (26000, 16000) -> (24000, 22000) -> (22000, 28000)

    - number of entries in student   solution: 1494
    - number of entries in reference solution: 31
    - 1464 extra entries in student solution, including:
      '(27000, 31000) -> (29000, 31000)'

    - 1 missing entry in student solution:
      '(0, 23000) -> (8000, 23000) -> (21000, 23000) -> (26000, 23000) -> (30000, 23000)'


  * filename = input300.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 332: (29900, 1600) -> (21900, 9600)
    - reference segment 0: (31000, 500) -> (29900, 1600) -> (23000, 8500) -> (21900, 9600)

    - number of entries in student   solution: 1730
    - number of entries in reference solution: 6
    - 1724 extra entries in student solution, including:
      '(11800, 32650) -> (1000, 32650)'


  * filename = inarow.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (30000, 0) -> (20000, 25000)
    - reference segment 0: (30000, 0) -> (27000, 7500) -> (26000, 10000) -> (20000, 25000) -> (19000, 27500) -> (18000, 30000)

    - number of entries in student   solution: 79
    - number of entries in reference solution: 5
    - 75 extra entries in student solution, including:
      '(18000, 30000) -> (0, 30000)'

    - 1 missing entry in student solution:
      '(0, 0) -> (2300, 4100) -> (4600, 8200) -> (11500, 20500)'


==> FAILED

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 20: (22440, 16455) -> (22335, 19149)
    - reference segment 0: (22440, 16455) -> (22405, 17353) -> (22370, 18251) -> (22335, 19149) -> (22300, 20047)

    - number of entries in student   solution: 6753
    - number of entries in reference solution: 288
    - 6589 extra entries in student solution, including:
      '(14764, 30467) -> (14236, 30449)'

    - 124 missing entries in student solution, including:
      '(12652, 30395) -> (13180, 30413) -> (13708, 30431) -> (14236, 30449) -> (14764, 30467)'


  * filename = rs1423.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3995, 9017) -> (3994, 9820)
    - reference segment 0: (3996, 8214) -> (3995, 9017) -> (3994, 9820) -> (3993, 10623)

    - number of entries in student   solution: 4864
    - number of entries in reference solution: 443
    - 4710 extra entries in student solution, including:
      '(13053, 28029) -> (13443, 28086)'

    - 289 missing entries in student solution, including:
      '(14169, 27672) -> (13927, 27810) -> (13685, 27948) -> (13443, 28086)'


==> FAILED

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (13000, 0) -> (9000, 6000)
    - reference segment 0: (13000, 0) -> (11000, 3000) -> (9000, 6000) -> (5000, 12000)

    - number of entries in student   solution: 24
    - number of entries in reference solution: 4
    - 23 extra entries in student solution, including:
      '(10000, 20000) -> (0, 30000)'

    - 3 missing entries in student solution, inclu

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.
